security:
    encoders:
        App\Entity\Personne:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Personne
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            provider: app_user_provider
            guard:
                authenticators:
                    - App\Security\CustomAuthenticator
                    - App\Security\Google\GoogleAuthenticator
                    - App\Security\Facebook\FacebookAuthenticator
                entry_point: App\Security\CustomAuthenticator
            logout:
                path: app_logout
                target: app_login
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN
    access_control:
         - { path: ^/accueil, roles: ROLE_USER }
         - { path: ^/bornes/activer/, roles: ROLE_USER }
         - { path: ^/bornes/desactiver/, roles: ROLE_USER }
         - { path: ^/bornes/ajouter, roles: ROLE_ADMIN }
         - { path: ^/bornes/hitorique/, roles: ROLE_USER }
         - { path: ^/bornes, roles: ROLE_USER }
         - { path: ^/bornes/modifier/, roles: ROLE_USER }
         - { path: ^/bornes/stats/, roles: ROLE_USER }
         - { path: ^/contact, roles: ROLE_USER }
         - { path: ^/bornes/contacts/ajouter, roles: ROLE_USER }
         - { path: ^/bornes/contacts/modifier/, roles: ROLE_USER }
         - { path: ^/news, roles: ROLE_USER }
         - { path: ^/news/ajouter, roles: ROLE_USER }
         - { path: ^/serveurs, roles: ROLE_ADMIN }
         - { path: ^/serveurs/ajouter, roles: ROLE_ADMIN }
         - { path: ^/serveurs/modifier/, roles: ROLE_ADMIN }
         - { path: ^/utilisateurs, roles: ROLE_ADMIN }
         - { path: ^/managers, roles: ROLE_ADMIN }
         - { path: ^/admin/ajouter, roles: ROLE_ADMIN }
         - { path: ^/managers/ajouter, roles: ROLE_ADMIN }
         - { path: ^/managers/modifier/, roles: ROLE_ADMIN }
         - { path: ^/mdp, roles: ROLE_USER }
         - { path: ^/CGU/versions/ajouter, roles: ROLE_ADMIN }
         - { path: ^/modifier/compte, roles: ROLE_USER }
         #- { path: ^/accueil, roles: ROLE_USER }
         #- { path: ^/, roles: ROLE_USER }
         #- { path: ^/profile, roles: ROLE_USER }
knpu_oauth2_client:
    clients:
        google:
            # must be "google" - it activates that type!
            type: google
            # add and configure client_id and client_secret in parameters.yml
            client_id: '%env(resolve:GOOGLE_CLIENT_ID)%'
            client_secret: '%env(resolve:GOOGLE_CLIENT_SECRET)%'
            # a route name you'll create
            redirect_route: connect_google_check
            redirect_params: {}
            # Optional value for sending access_type parameter. More detail: https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters
            # access_type: ''
            # Optional value for sending hd parameter. More detail: https://developers.google.com/identity/protocols/OpenIDConnect#hd-param
            # hosted_domain: ''
            # Optional value for additional fields to be requested from the user profile. If set, these values will be included with the defaults. More details: https://developers.google.com/+/web/api/rest/latest/people
            # user_fields: {}
            # whether to check OAuth2 "state": defaults to true
            # use_state: true



        # the key "facebook_main" can be anything, it
        # will create a service: "knpu.oauth2.client.facebook_main"
        facebook_main:
            # this will be one of the supported types
            type: facebook
            client_id: '%env(resolve:FACEBOOK_ID)%'
            client_secret: '%env(resolve:FACEBOOK_SECRET)%'
            # the route that you're redirected to after
            # see the controller example below
            redirect_route: connect_facebook_check
            redirect_params: {}
            graph_api_version: v2.12
